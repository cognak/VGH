&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	Если Модифицированность Тогда
		
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПроверитьСоединениеЗавершение", ЭтотОбъект), 
			НСтр("ru='Настройка обмена изменена и не записана. Записать?';uk='Налаштування обміну змінене й не записане. Записати?'"),
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	КомандаПроверитьСоединениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        Возврат;
    КонецЕсли;
    
    КомандаПроверитьСоединениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеФрагмент()
    
    Перем ТекстПредупреждения;
    
    ТекстПредупреждения = "";
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ИмяПользователя", Объект.ИмяПользователя);
	НастройкиПодключения.Вставить("АдресСайта", Объект.АдресСайта);
	НастройкиПодключения.Вставить("Токен", Объект.Токен);
	
    ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения);
    
    ПоказатьПредупреждение(,ТекстПредупреждения);

КонецПроцедуры
&НаСервере
Процедура ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения)
	
	Если Объект.Ссылка.Пустая() ИЛИ ПарольИзменен Тогда
		ПарольИзХранилища = Пароль;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Пароль", ПарольИзХранилища);
	
	ОбменСМанжента.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстПредупреждения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВыполнитьДействияПриСозданииНаСервере();
КонецПроцедуры
&НаСервере
Процедура ВыполнитьДействияПриСозданииНаСервере()
	
	//Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
	//	Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Истина;
	//Иначе
	//	Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Ложь;
	//	Если Не Объект.ВыгружатьНаСайт Тогда
	//		Объект.ВыгружатьНаСайт = Истина;
	//		Модифицированность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(ПарольИзХранилища), ЭтотОбъект.УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Объект.ДатаНачалаВыгрузкиЗаказов = НачалоМесяца(ТекущаяДата());
	//	Объект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	//	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	//	Объект.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней = 1;
	//КонецЕсли;
	
	//СпособУстановкиДатыОтгрузкиЗаказаПриИзмененииНаСервере();
	//
	//ЗаполнитьСписокВидовЦенСервер();
	//
	//ЗаполнитьТаблицуКаталоговСервер();
	//
	//УстановитьПараметрыТаблицыКаталоговСервер();
	//
	//УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры
// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если Объект.ОбменТоварами И ТаблицаКаталогов.Количество() = 0 Тогда
	//	
	//	Отказ = Истина;
	//	
	//	Сообщение = НСтр("ru='Таблица каталогов не заполнена!';uk='Таблиця каталогів не заповнена!'");
	//	Поле = "ТаблицаКаталогов";
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
	//	
	//КонецЕсли;
	
КонецПроцедуры
// Процедура - обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Обмен с сайтом по расписанию
	//Если ТекущийОбъект.ИспользоватьРегламентныеЗадания
	//	И (РасписаниеРегламентногоЗаданияОбмена = Неопределено
	//	ИЛИ (РазделениеВключено И Не РасписаниеРегламентногоЗаданияОбмена.ПериодПовтораВТечениеДня > 0)) Тогда
	//	
	//	ТекущийОбъект.ИспользоватьРегламентныеЗадания = Ложь;
	//КонецЕсли;
	
	//Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(ТекущийОбъект.ИдентификаторРегламентногоЗадания);
	//Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
	//	
	//	Если Задание = Неопределено Тогда
	//		ИдентификаторЗадания = ОбменССайтомРегламентныеЗадания.СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
	//		ТекущийОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторЗадания;
	//	Иначе
	//		ОбменССайтомРегламентныеЗадания.УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	Если Задание <> Неопределено Тогда
	//		ОбменССайтомРегламентныеЗадания.УдалитьЗадание(Задание);
	//	КонецЕсли;
	//	ТекущийОбъект.ИдентификаторРегламентногоЗадания = Неопределено;
	//	
	//КонецЕсли;
	
	//Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков);
	//Если ТекущийОбъект.ЗагружатьОнлайнОплаты Тогда
	//	
	//	Если Задание = Неопределено Тогда
	//		ИдентификаторЗадания = ОбменССайтомРегламентныеЗадания.СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование+"-онлайн чеки", РасписаниеРегламентногоЗаданияФормированиеЧеков);
	//		ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков = ИдентификаторЗадания;
	//	Иначе
	//		ОбменССайтомРегламентныеЗадания.УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование+"-онлайн чеки", РасписаниеРегламентногоЗаданияФормированиеЧеков);
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	Если Задание <> Неопределено Тогда
	//		ОбменССайтомРегламентныеЗадания.УдалитьЗадание(Задание);
	//	КонецЕсли;
	//	ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков = Неопределено;
	//	
	//КонецЕсли;
	
	//// Сохранение видов цен.
	//ВидыЦен = ТекущийОбъект.ВидыЦен;
	//ВидыЦен.Очистить();
	//
	//Для каждого ЭлементСЗ Из СписокВидовЦен Цикл 
	//	
	//	НоваяСтрока = ВидыЦен.Добавить();
	//	НоваяСтрока.ВидЦен = ЭлементСЗ.Значение;
	//	
	//КонецЦикла;
	
	// Таблица каталогов.
	
	//ТаблицаКаталоговТЗ = ДанныеФормыВЗначение(ТаблицаКаталогов, Тип("ТаблицаЗначений"));
	//ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	//
	//Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
	//	
	//	Если НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
	//		
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
	//	СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
	//	
	//КонецЦикла;
	//
	//ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	//
	//ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	//ТекущийОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = ТекущийОбъект.ЭтоНовый();
	
КонецПроцедуры
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСМанжента.ОбновитьПараметрыСеанса();
	
КонецПроцедуры
