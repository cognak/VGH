
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	//Объект.ТекущееУстройство  = ПараметрыСеанса.РабочееМестоКлиента;
	//СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	//Если СписокЭлектронныхВесов.Количество() = 0 Тогда
	//	// Нет подключенных весов.
	//	Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	//КонецЕсли;
	//Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	//Вставить содержимое обработчика
	//СистемнаяИнформация = Новый СистемнаяИнформация();
	//ПараметрыРабочегоМеста     = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРабочегоМеста(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	//Объект.ТекущееРабочееМесто = ПараметрыРабочегоМеста.ТекущееРабочееМесто;
	//Объект.ТекущееУстройство   = ПараметрыРабочегоМеста.Устройство_ВГХ;
	//Объект.ТекущееРабочееМесто=ПараметрыСеанса.РабочееМестоКлиента;
	//ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	//Объект.ТекущееУстройство  = Объект.ТекущееРабочееМесто.Устройство_ВГХ;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, УстройствоВГХ");
	// Конец ПодключаемоеОборудование

	//Место=ТекущееРабочееМесто;
	//ЕстьРабочееМесто = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	//Если ЕстьРабочееМесто Тогда
	//	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,ЭлектронныеВесы,УстройствоВГХ");
	//	ПодключенноеУстройство = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка)
	//	//ОткрытьФорму("Обработка.ТестированиеПодключаемогоОборудования.Форма", , ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	//	//Объект.ТекущееРабочееМесто=ПараметрыСеанса.РабочееМестоКлиента;
	//	//ТекущееУстройство  = Объект.ТекущееРабочееМесто.Устройство_ВГХ;
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'"));
	//КонецЕсли;
	хх=глПодключаемоеОборудование;
	ЕстьРабочееМесто = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	//Если ЕстьРабочееМесто Тогда
		МенеджерОборудованияКлиент.НачатьПодключениеОборудования(Неопределено, ЭтотОбъект, Новый Структура("СканерШтрихкода,ЭлектронныеВесы,УстройствоВГХ"));
	//	ПодключенноеУстройство = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, УникальныйИдентификатор)
	//Иначе
	//	ПоказатьПредупреждение(,"На рабочем месте Нет ни одного подключенного устройства.");
	//	Отказ=Истина;
	//	возврат;
	//КонецЕсли;
	
	Если НЕ ХХ.ПараметрыПодключенияПО.Количество()=0 Тогда
		//КонецЕсли; 
		Объект.ТекущееРабочееМесто=   глПодключаемоеОборудование.ПараметрыПодключенияПО[0].РабочееМесто;
		Объект.ТекущееУстройство  =   глПодключаемоеОборудование.ПараметрыПодключенияПО[0].Ссылка;
		
		Для каждого ЭлементМассива Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
			Элементы.ЛокальноеОборудование.СписокВыбора.Добавить(ЭлементМассива.Ссылка);
		КонецЦикла;
		ЛокальноеОборудование=глПодключаемоеОборудование.ПараметрыПодключенияПО[0].Ссылка;
		ТекущееУстройствоПриИзмененииНаСервере()
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбора(ВыбЗнач, Параметры) Экспорт
    Если ВыбЗнач<>Неопределено Тогда
        // обработка введенного значения
		Объект.ТекущееУстройство = ВыбЗнач;
		УстановитьЗначениеПараметраСеанса("ТекущееУстройство",ВыбЗнач) ;
		ТекущееУстройствоПриИзмененииНаСервере()
	Иначе
		
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра,ЗначениеПараметра)

ПараметрыСеанса[ИмяПараметра]=ЗначениеПараметра	;

КонецПроцедуры



&НаКлиенте
Процедура СоздатьНовый(Команда)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Объект.ТекущееУстройство) Тогда
		////откоем форму нового документа с параметром ТекущееУстройство
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("ТекущееУстройство",Объект.ТекущееУстройство);
		ПараметрыФормы.Вставить("ТекущееРабочееМесто",Объект.ТекущееРабочееМесто);
	    ОткрытьФорму("Документ.ОтгрузкаПоЗаказу.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// выбор устройства 
		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ТекущееУстройствоПриИзмененииНаСервере()
	// Вставить содержимое обработчика. 
	если ЗначениеЗаполнено(Объект.ТекущееУстройство) Тогда
		Справочники.ПодключаемоеОборудование.ВыбраноУстройство(Объект.ТекущееУстройство );
		//ПараметрыСеанса.ТекущееУстройство= Объект.ТекущееУстройство;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущееУстройствоПриИзменении(Элемент)
		ТекущееУстройствоПриИзмененииНаСервере();
КонецПроцедуры





&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	хх=1;
КонецПроцедуры


&НаКлиенте
Процедура ПечатьРеестра(Команда)
	
	#Если ВебКлиент Тогда
		
	#Иначе
		
		ИмяКоманды=Команда.Имя;
		
		ИмяРеквизита=?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),"СсылкаНаФайлТТННаСайте","СсылкаНаФайлЯрлыкиНаСайте");
		
		// Проверка принтеров
		ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(Объект.ТекущееРабочееМесто);
		ИмяПринтера = ПараметрыПечати.ИмяПринтераДокументов;
		
		// проверить существует ли принтер на компе с таким именем
		МассивПринтеров=ПолучитьМассивПринтеров();
		
		СтруктураОтвет = Новый Структура("ДанныеОтвета,Отработало,ТекстОшибки,КодОтвета","",Истина,"",200);	

		ПараметрыЗапроса = Новый Структура("order,type,key","999999999-999","reestr");
				
		вхПараметры = Новый Структура("ИмяМетода,ПараметрыЗапроса", "print", ПараметрыЗапроса);
				
		Результат = Неопределено;
		
		// запрос на сайте ссылки на документа для печати
		вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("POST",вхПараметры ,СтруктураОтвет);
			
		Если СтруктураОтвет.Отработало Тогда
			
			Результат=СтруктураОтвет.ДанныеОтвета;
			Если Результат.Свойство("error") тогда
				ТекстОшибки = Результат.error[0].info.message;
				ПоказатьПредупреждение(,"Ответ сайта: "+ТекстОшибки,);
				Возврат;
			КонецЕсли;
			
			Если Результат.Свойство("success") тогда
				
				Если Результат.success[0].status="OK" Тогда
					СсылкаНаДокументПечати=СтруктураОтвет.ДанныеОтвета.success[0].doc;
					ПечатьДокументаПоСсылкеЗавершение(Новый Структура("Значение",КодВозвратаДиалога.Да),Новый Структура("ИмяКоманды,СсылкаНаДокумент,MP,НомерДокумента",ИмяКоманды,СсылкаНаДокументПечати,Ложь,"999999999-999"));
				Иначе 
					текстОшибки=СтруктураОтвет.ДанныеОтвета.info.message;
					А = Новый Массив();
					А.Добавить("Ошибка: ");
					А.Добавить(Новый ФорматированнаяСтрока(
					текстОшибки,
					Новый Шрифт(,,Истина)));
					Стр = Новый ФорматированнаяСтрока(А);
					ПоказатьПредупреждение(,стр,);
					хх=1;
				КонецЕсли;
			Иначе
				
			КонецЕсли;
		Иначе 
			А = Новый Массив();
			А.Добавить("Ошибка: ");
			А.Добавить(Новый ФорматированнаяСтрока(
			СтруктураОтвет.ТекстОшибки,
			Новый Шрифт(,,Истина)));
			Стр = Новый ФорматированнаяСтрока(А);
			ПоказатьПредупреждение(,стр,);
			Возврат;
			хх=1;
		КонецЕсли;
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументаПоСсылкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	СсылкаНаДокумент= ДополнительныеПараметры.СсылкаНаДокумент;

	Если Результат.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	// получить документ по ссылке
	MP = Ложь;
	ДополнительныеПараметры.Свойство("MP",MP);
	НомерДокумента = "";
	ДополнительныеПараметры.Свойство("НомерДокумента", НомерДокумента);
	
	//+Криворучко
	//врФайлПечатнойФормы=ПолучитьФайлССервера(СсылкаНаДокумент,MP);
	//
	УникальныйИдентификатор1 = ЭтаФорма.УникальныйИдентификатор;
	Адрес = вгхОбщийПроцедурыФункцииСервер.ПолучитьФайлССервера(СсылкаНаДокумент,MP,УникальныйИдентификатор1,,НомерДокумента);
	#Если ВебКлиент Тогда //***д***//
		Каталог = КаталогВременныхФайлов();
		ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".pdf";
		врФайлПечатнойФормы = Каталог + ИмяФайла;
	#Иначе
		ВремКаталог = "";
		Выполнить("ВремКаталог = ПолучитьИмяВременногоФайла()");
		СоздатьКаталог(ВремКаталог);
		врФайлПечатнойФормы = ВремКаталог + "\temp.pdf";
	#КонецЕсли   //***д***//

	Описание=Новый ОписаниеПередаваемогоФайла(врФайлПечатнойФормы,Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
	//ПолучитьФайл(Адрес,врФайлПечатнойФормы,Ложь);
	//-

	мфайл = Новый Файл(врФайлПечатнойФормы);
	
	ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(Объект.ТекущееРабочееМесто);
	ИмяПринтера=ПараметрыПечати.ИмяПринтераДокументов;
	// проверить существует ли принтер на компе с таким именем
	//МассивПринтеров=ПолучитьМассивПринтеров();
	//Если МассивПринтеров.Найти(ИмяПринтера)=Неопределено Тогда
	//
	//	А = Новый Массив();
	//	А.Добавить(Новый ФорматированнаяСтрока("Имя принтера """+ИмяПринтера+""" не найдено.",Новый Шрифт(,12,Истина)));
	//	А.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+" Печать не возможна.",Новый Шрифт(,14,Истина)));
	//	
	//	Стр = Новый ФорматированнаяСтрока(А);
	//	ПоказатьПредупреждение(,стр);
	//	возврат;
	//КонецЕсли; 
	ПоказатьОповещениеПользователя(НСтр("ru='Документ отправлен на печать';uk='Документ відправлен на друк'"),	, ,	БиблиотекаКартинок.Информация32);
	
	ИмяПринтера = "Microsoft Print to PDF";
	WshShell = новый COMОбъект("WScript.Shell");
	//ReturnCode=WshShell.Run("""C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe"" /t "+мфайл.ПолноеИмя+" "+ИмяПринтера, 1, True);
	ReturnCode=WshShell.Run("""C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe"" /t "+""""+врФайлПечатнойФормы+""""+" "+ИмяПринтера, 1, True);

КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто)
	
	Возврат Новый Структура("ИмяПринтераДокументов,ИмяПритераЭтикеток",ТекущееРабочееМесто.ИмяПринтераДокументов,ТекущееРабочееМесто.ИмяПринтераЭтикеток);	
	
КонецФункции // ПолучитьИмяПринтераНаСервере()

&НаКлиенте
Функция ПолучитьМассивПринтеров() Экспорт
	
	WScriptNetwork = Новый COMОбъект("WScript.Network");
	МассивПринтеров = Новый Массив;
	Printers = WScriptNetwork.EnumPrinterConnections ();
	КоличествоПринтеров = Printers.length - 1;
		
	Для Номер = 0 По КоличествоПринтеров Цикл
		
		ТекСтруктура = Новый Структура("Порт, Имя");
		ТекСтруктура.Порт = Printers.Item(Номер);
		Номер = Номер + 1;
		ТекСтруктура.Имя = Printers.Item(Номер);
		МассивПринтеров.Добавить(Printers.Item(Номер));
		//МассивПринтеров.Добавить(ТекСтруктура);
		
	КонецЦикла;
	
	Возврат МассивПринтеров;
	
КонецФункции 

