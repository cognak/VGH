Функция ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстПредупреждения) Экспорт
	ПараметрыПодключения = Новый Структура("АдресСайта, Пароль, ИмяПользователя,Токен");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, НастройкиПодключения);
	
	ТипСоединения = "parcel";
	ОписаниеОшибки = "";
	
	Если НЕ ПолучитьНастройкиПодключения(ПараметрыПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru='Ошибка при получении параметров подключения к сайту.';uk='Помилка при одержанні параметрів підключення до сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Соединение = Неопределено;
	
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения);
	Если Успешно Тогда
		
		ТекстПредупреждения = НСтр("ru='Соединение с сайтом успешно установлено.';uk='З`єднання з сайтом успішно встановлене.'");
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Не удалось установить соединение.';uk='Не вдалося встановити з`єднання.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции
Функция УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки) Экспорт
	
	Соединение = Неопределено;
	
	Попытка
		
		Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			
			Соединение = Новый HTTPСоединение(
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.ИмяПользователя,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.Прокси,
				1800,
				ssl
			);
			
		Иначе
			
			Соединение = Новый HTTPСоединение(
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.ИмяПользователя,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.Прокси,
				1800
			);
			
		КонецЕсли;
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.';uk='Не вдалося встановити з`єднання із сервером %1:%2. Перевірте правильність адреси сервера, порт, ім`я користувача й пароль.'"),
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт)
			)
		);
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции
Процедура ДобавитьОписаниеОшибки(Описание, Дополнение) Экспорт
	
	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;
	
КонецПроцедуры
// Формирует расширенное описание ошибки.
//
// Параметры:
//	ТекстНачалаСообщения - Строка
//	ТекстОкончанияСообщения - Строка
//
// Возвращаемое значение:
//	Строка - Сформированное описание ошибки.
//
Функция ОписаниеИсключительнойОшибки(ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "") Экспорт
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	ТекстСообщения = НСтр("ru='Произошла ошибка: ';uk='Відбулася помилка:'")
		+ ТекстНачалаСообщения
		+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
		+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
		
	Возврат ТекстСообщения;
	
КонецФункции
Функция ПолучитьHTTPСоединение(ПараметрыПодключения,ОписаниеОшибки) Экспорт
	HTTPСоединение = Неопределено;

	СтруктураАдресСервера =ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.АдресСайта);
	перСервер = СтруктураАдресСервера.Хост;
	перПорт   = ПараметрыПодключения.Порт; 
	перПорт1  = СтруктураАдресСервера.Порт; 
	перПользователь =ПараметрыПодключения.ИмяПользователя;
	перПароль =ПараметрыПодключения.Пароль;
	Если ВРег(СтруктураАдресСервера.Схема)="HTTPS" Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
	Иначе	
		ssl = Неопределено;
	КонецЕсли;
	Попытка		
		Если перПорт <= 0 Тогда 
			HTTPСоединение = Новый HTTPСоединение(перСервер,,перПользователь,перПароль,,,ssl,Ложь);
		Иначе 
			HTTPСоединение = Новый HTTPСоединение(перСервер,,перПользователь,перПароль,,,ssl,Ложь);
		КонецЕсли;	
	Исключение
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.';uk='Не вдалося встановити з`єднання із сервером %1:%2. Перевірте правильність адреси сервера, порт, ім`я користувача й пароль.'"),
				ПараметрыПодключения.Сервер,
				ПараметрыПодключения.Порт)
			)
		);
		
		HTTPСоединение = Неопределено;
		
		//СтруктураОтвета.Отработало=Ложь;
		//СтруктураОтвета.ТекстОшибки= "Подключение не прошло по причине "+ОписаниеОшибки();
		//Сообщить("Подключение не прошло по причине "+ОписаниеОшибки());
		////Подчищаем соединение
		//HTTPСоединение = Неопределено;
		//Возврат Неопределено;
	КонецПопытки;
	Возврат HTTPСоединение;			
КонецФункции // ()
Функция ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения = "catalog") Экспорт
	
	Соединение = ПолучитьHTTPСоединение(ПараметрыПодключения, ОписаниеОшибки);
	//Соединение = УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Авторизация не выполнена.';uk='Авторизація не виконана.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	//ПараметрыЗзапроса должно быть api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=999999999
	ПараметрыЗапроса=ПараметрыПодключения.АдресСкрипта + ТипСоединения+"?key=" + ПараметрыПодключения.Токен; // + "&order="+"999999999" ;
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение, 
		ПараметрыЗапроса,
		,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Авторизация не выполнена.';uk='Авторизація не виконана.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		//Иногда ответ сервера - это текст, который содержит пояснение ошибки, тогда его можно вывести пользователю
		//Если ответ сервера - это html страница, тогда не выводим
		Если СтрДлина(ОтветСервера)<255 И Лев(ОтветСервера,15) <> "<!DOCTYPE html>" И СтрНайти(Лев(ОтветСервера,255),"<html")=0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
		КонецЕсли;
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Авторизация не выполнена.';uk='Авторизація не виконана.'")
			+ Символы.ПС 
			+ НСтр("ru='Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.';uk='Не вдалося встановити з`єднання із сервером. Перевірте ім`я користувача й пароль.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса = "", Заголовки = "", ОписаниеОшибки)
	
	ОтветСервера	= Неопределено;
	HTTPОтветСервера= Неопределено;
	ContentType		= Неопределено;
		
	КодировкаXML	= Неопределено;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	//Если СтрНайти(Заголовки,"Cookie: ")<>0 Тогда
	//	ЗаголовокHTTP.Вставить("Cookie", Сред(Заголовки, 8+СтрНайти(Заголовки,"Cookie: ")));
	//КонецЕсли;
	//Параметры запроса должно быть api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=999999999
	
	//Сообщить("----------- "+"api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=999999999");
	//Сообщить("Программно: "+ПараметрыЗапроса);
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);
	//HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);
	Попытка
		HTTPОтветСервера = Соединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
		//HTTPОтветСервера = Соединение.Получить(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
	КонецПопытки;
	
	Если HTTPОтветСервера=Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(НСтр("ru='Ответ сервера не получен';uk='Відповідь сервера не отримана'")));
		Возврат Неопределено;
	ИначеЕсли HTTPОтветСервера.КодСостояния<>200 Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Получение данных с сервера: Ответ сервера: ';uk='Отримання даних з сервера: Відповідь сервера: '"+HTTPОтветСервера.КодСостояния));
	КонецЕсли;
	Возврат "success";	
	ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку();
	
	Если ОтветСервера=Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Отправка файла на сервер: Ответ сервера не получен.';uk='Відправка файлу на сервер: Відповідь сервера не отримана.'"));
	ИначеЕсли ОтветСервера="" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Отправка файла на сервер: Получен пустой ответ сервера.';uk='Відправка файлу на сервер: Отримана порожня відповідь сервера.'"));
	ИначеЕсли СтрНайти(ОтветСервера,"�")>0 Тогда
		
		Если HTTPОтветСервера.Заголовки.Получить("Content-Type")<>Неопределено Тогда
			ContentType = HTTPОтветСервера.Заголовки.Получить("Content-Type");
			Если ContentType <> Неопределено Тогда
				Если СтрНайти(ContentType, "charset=")<>0 Тогда
					КодировкаXML = Сред(ContentType, 8+СтрНайти(ContentType, "charset="));
					ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			КодировкаXML = "windows-1251";
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			КодировкаXML = "UTF-8";
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru='Отправка файла на сервер: Не удалось прочитать ответ сервера в указанной кодировке';uk='Відправка файлу на сервер: Не вдалося прочитати відповідь сервера у вказаному кодуванні'"+ContentType));
		КонецЕсли;
	ИначеЕсли ОписаниеОшибки<>"" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции
// Формирует структуру параметров подключения к сайту по настройке обмена
// с учетом параметров прокси.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = "";
	Если НЕ РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = Неопределено; //ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, Неопределено); //СформироватьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат Истина;
	
КонецФункции
// Формирует структуру параметров подключения к сайту по URL.
//
// Параметры:
//	АдресСайта - Строка, URL
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки)
	
	АдресСайта = СокрЛП(НастройкиПодключения.АдресСайта);

	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = СтрНайти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		//Попытка
		//	
		//	Порт = Число(ПортСтрока);
		//	
		//Исключение
		//	
		//	ДобавитьОписаниеОшибки(ОписаниеОшибки,
		//		ОписаниеИсключительнойОшибки(НСтр("ru='Не удалось получить номер порта: ';uk='Не вдалося одержати номер порту:'")
		//			+ ПортСтрока + Символы.ПС
		//			+ НСтр("ru='Проверьте правильность ввода адреса сайта.';uk='Перевірте правильність введення адреси сайту.'")));
		//		
		//	Возврат Ложь;
		//	
		//КонецПопытки;
		//
		//Если Порт = 0 Тогда
		//	Порт = ?(ЗащищенноеСоединение, 443, 80);
		//КонецЕсли;
		
	КонецЕсли;
	
	Если АдресСкрипта = "" Тогда
		АдресСкрипта = "bitrix/admin/1c_exchange.php";
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции
// Обновляет значения параметров сеанса.
//
Процедура ОбновитьПараметрыСеанса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОбменССайтами = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтами");
	
	ИспользуемыеУзлыОбменаССайтом = Новый Массив;
	Если ИспользоватьОбменССайтами Тогда
		
		ИспользуемыеУзлыОбменаССайтом = ПолучитьИспользуемыеУзлыОбменаССайтом();
		
	КонецЕсли;
	
	ОбменДаннымиССайтомВключен = НЕ ИспользуемыеУзлыОбменаССайтом.Количество() = 0;
	
	ПараметрыСеанса.ОбменДаннымиССайтомВключен = ОбменДаннымиССайтомВключен;
	ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом = Новый ФиксированныйМассив(ИспользуемыеУзлыОбменаССайтом);
	
КонецПроцедуры
// Получает массив узлов обмена, используемых в настройках обмена.
//
Функция ПолучитьИспользуемыеУзлыОбменаССайтом()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбменсСайтом.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменсСайтом КАК ОбменсСайтом
		|ГДЕ
		|	НЕ ОбменсСайтом.ПометкаУдаления
		|	И ОбменсСайтом.Ссылка <> &ЭтотУзел");
		
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменсСайтом.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
/////////////////////////////////////////////////////

Процедура ПолучитьРезультатНаСервере(МетодСервиса,вхПараметры,СтруктураОтвета) Экспорт
	Сайт_ПараметрыПодключения=ПланыОбмена.ОбменсСайтом.ПолучитьПараметрыАктивногоСайта(); //ПолучитьПараметрыподключения("Mangento");
	Если НЕ ЗначениеЗаполнено(Сайт_ПараметрыПодключения)Тогда
		СтруктураОтвета.Отработало=Ложь;
		СтруктураОтвета.ТекстОшибки= "Не Смогли получить Параметры подключения к Сайту";
		Возврат;
	КонецЕсли; 
	СтруктураАдресСервера =ОбщегоНазначенияКлиентСервер.СтруктураURI(Сайт_ПараметрыПодключения.HTTPСервер);
	Сайт_ПараметрыПодключения.Вставить("СтруктураАдресСервера",СтруктураАдресСервера);
	HTTPСоединение = ПолучитьHTTPСоединение(Сайт_ПараметрыПодключения,СтруктураОтвета);
	
	
	Если МетодСервиса = "GET"  Тогда
		//https://dev.ants.co.ua/api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=100925836
		ИмяМетода="";
		Если вхПараметры.Свойство("ИмяМетода",ИмяМетода) Тогда
			перСтруктураЗапроса = "";
			Если ЗначениеЗаполнено(Сайт_ПараметрыПодключения.GUID) Тогда 
				перСтруктураЗапроса = "?key=" + Сайт_ПараметрыПодключения.GUID ;	
			КонецЕсли;                     
			Если ЗначениеЗаполнено(вхПараметры.Order) Тогда
				перСтруктураЗапроса = ?(ПустаяСтрока(перСтруктураЗапроса),
				"?order="+вхПараметры.Order,
				перСтруктураЗапроса+"&order="+вхПараметры.Order);		
			КонецЕсли;
			перРесурсНаСервере=СтруктураАдресСервера.ПутьНаСервере+"parcel"+перСтруктураЗапроса;		
			перРесурсНаСервере=СтруктураАдресСервера.ПутьНаСервере+ИмяМетода+перСтруктураЗапроса;		
			Заголовки = Новый Соответствие();
			Заголовки.Вставить("Content-Type", "application/json");
			HTTPЗапрос = Новый HTTPЗапрос(перРесурсНаСервере,Заголовки);
			
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
			Если HTTPОтвет.КодСостояния=200 Тогда
				//Получаем ответный текст или текст ошибки
				ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				Попытка
					ЧтениеJSON=Новый ЧтениеJSON; 
					ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
					Результат=ПрочитатьJSON(ЧтениеJSON,,);
					ЧтениеJSON.Закрыть();
					//вернем результат
					СтруктураОтвета.Отработало=Истина;
					СтруктураОтвета.ДанныеОтвета=Результат;
					//Подчищаем соединение
					HTTPСоединение = Неопределено;
					Возврат;
				Исключение
					СтруктураОтвета.Отработало=Ложь;
					СтруктураОтвета.ТекстОшибки= "Не смогли прочитать тело ответа сайта";
					СтруктураОтвета.ДанныеОтвета=ТелоОтвета;
					СтруктураОтвета.КодОтвета= HTTPОтвет.КодСостояния;
					//Подчищаем соединение
					HTTPСоединение = Неопределено;
				КонецПопытки;
			Иначе	
				//ошибка выполнения запроса
				СтруктураОтвета.Отработало=Ложь;
				СтруктураОтвета.ТекстОшибки= "Сайт вернул ответ с кодом: "+HTTPОтвет.КодСостояния;
				СтруктураОтвета.КодОтвета= HTTPОтвет.КодСостояния;
				//Подчищаем соединение
				HTTPСоединение = Неопределено;
				Возврат; 
			КонецЕсли; 
		иначе
			//не задано имяМетода
			СтруктураОтвета.Отработало=Ложь;
			СтруктураОтвета.ТекстОшибки= "Не указано имя метода HTTP Запроса";
			//Подчищаем соединение
			HTTPСоединение = Неопределено;
			Возврат;
		КонецЕсли; // имяМетода
	ИначеЕсли МетодСервиса = "POST" Тогда
		ПараметрыЗапроса =вхПараметры.ПараметрыЗапроса;
		телоЗапроса = вхПараметры.ПараметрыЗапроса;
		телоЗапроса.key=Сайт_ПараметрыПодключения.GUID;
		ТелоЗапросаJSON=вгхОбщиеПроцедурыИФункции.ЗаписатьДанныеВJSON(Неопределено,телоЗапроса);
		
		перРесурсНаСервере=СтруктураАдресСервера.ПутьНаСервере+вхПараметры.ИмяМетода;
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");
		
		HTTPЗапрос = Новый HTTPЗапрос(перРесурсНаСервере,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапросаJSON );
		Попытка
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
			Если HTTPОтвет.КодСостояния=200 Тогда
				//запрос обработан сайтом
				ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				Если ЗначениеЗаполнено(ТелоОтвета) Тогда
					ЧтениеJSON=Новый ЧтениеJSON; 
					ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
					Результат=ПрочитатьJSON(ЧтениеJSON,,);
					ЧтениеJSON.Закрыть();
					//вернем результат
					СтруктураОтвета.Отработало=Истина;
					СтруктураОтвета.ДанныеОтвета=Результат;
				Иначе
					СтруктураОтвета.Отработало=Ложь;
					СтруктураОтвета.ТекстОшибки= "Сайт вернул пустое тело ответа";
					//Подчищаем соединение
					HTTPСоединение = Неопределено;
					Возврат;
				КонецЕсли; 
			Иначе	
				//ошибка выполнения запроса
				СтруктураОтвета.Отработало=Ложь;
				СтруктураОтвета.ТекстОшибки= "Сайт вернул ответ с кодом: "+HTTPОтвет.КодСостояния;
				СтруктураОтвета.КодОтвета= HTTPОтвет.КодСостояния;
				//Подчищаем соединение
				HTTPСоединение = Неопределено;
				Возврат ;
			КонецЕсли;
		Исключение
			СтруктураОтвета.Отработало=Ложь;
			хх=ОписаниеОшибки();
			СтруктураОтвета.ТекстОшибки= "Не удачная попытка отправить запрос на сайт по причине: "+Символы.ПС+хх;
			//Подчищаем соединение
			HTTPСоединение = Неопределено;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	//Подчищаем соединение
	HTTPСоединение = Неопределено;
КонецПроцедуры
