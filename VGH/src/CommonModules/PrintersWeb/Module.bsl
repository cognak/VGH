
Функция ПолучитьПринтеры() Экспорт 
	
	Массив = ПолучитьМассивПринтеров();		
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	
	Попытка
		ЗаписатьJSON(ЗаписьJSON, Массив); 		
	Исключение
		лтекст = ОписаниеОшибки();
	КонецПопытки;
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
	   
КонецФункции 

Функция ПолучитьМассивПринтеров() Экспорт
	
	WScriptNetwork = Новый COMОбъект("WScript.Network");
	МассивПринтеров = Новый Массив;
	Printers = WScriptNetwork.EnumPrinterConnections ();
	КоличествоПринтеров = Printers.length - 1;
		
	Для Номер = 0 По КоличествоПринтеров Цикл
		
		ТекСтруктура = Новый Структура("Порт, Имя");
		ТекСтруктура.Порт = Printers.Item(Номер);
		Номер = Номер + 1;
		ТекСтруктура.Имя = Printers.Item(Номер);
		МассивПринтеров.Добавить(Printers.Item(Номер));
				
	КонецЦикла;
	
	Возврат МассивПринтеров;
	
КонецФункции 

Функция ОтправитьПечатьНаПринтер(пКоманда, пНомерДокумента, пПринтер) Экспорт 
	
	ИмяКоманды = пКоманда;
	
	ИмяРеквизита = ?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),"СсылкаНаФайлТТННаСайте","СсылкаНаФайлЯрлыкиНаСайте");
	
	лМассивВозврата = Новый Массив;
	объект = ПолучитьСсылкуОтгрузкаПоЗаказу(пНомерДокумента);
	
	// Проверка принтеров
	//ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто);
	//ИмяПринтера = ?(СтрНачинаетсяС(ИмяКоманды,"ТТН"), ПараметрыПечати.ИмяПринтераДокументов, ПараметрыПечати.ИмяПритераЭтикеток);
	ИмяПринтера = пПринтер;
	
	// проверить существует ли принтер на компе с таким именем
	//МассивПринтеров=ПолучитьМассивПринтеров();
	
	Если ЗначениеЗаполнено(объект.НомерТТН) Тогда
		//есть номерТТН, печатаем
		//проверим есть ли ссылка на файл, если есть то уже печатали
		//Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		//уже печатали, спросить о повторной печати
		//	Кнопки = Новый СписокЗначений;
		//	Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru='Распечатать';uk='Роздрукувати'"));
		//	Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru='Не печатать';uk='Не друкувати'"));
		//	
		//	мПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		//	мПараметры.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		//	мПараметры.Заголовок = НСтр("ru='Документ уже печатался. Отправить на печать повторно?';uk='Документ уже печатался. Отправить на печать повторно?'");
		//	мПараметры.КнопкаТаймаута = КодВозвратаДиалога.Нет;
		//	мПараметры.БольшеНеЗадаватьЭтотВопрос = Ложь;  //ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов;
		//	
		//	Оповещение= Новый ОписаниеОповещения("ПечатьДокументаПоссылкеЗавершение", ЭтотОбъект,	Новый Структура("ИмяКоманды,СсылкаНаДокумент,MP",ИмяКоманды, Объект[ИмяРеквизита],Объект.MP));
		//	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю( Оповещение,	НСтр("ru='Распечатать ТТН документов на принтере?';uk='Роздрукувати комплект документів на принтері?'"),Кнопки,мПараметры);
		//	Возврат ;
		//Иначе
		//надо получить файл на сервере
		СтруктураОтвет = Новый Структура("ДанныеОтвета,Отработало,ТекстОшибки,КодОтвета","",Истина,"",200);	
		
		текДокумент = Объект.Ссылка;
		мOrder = Объект.order;
		
		ПараметрыЗапроса = ?(СтрНачинаетсяС(ИмяКоманды, "ТТН"), Новый Структура("order,type,key",мOrder,"docs"), Новый Структура("order,type,key",мorder,"sticker"));
		
		вхПараметры = Новый Структура("ИмяМетода,ПараметрыЗапроса", "print", ПараметрыЗапроса);
		
		Результат = Неопределено;
		
		// запрос на сайте ссылки на документа для печати
		вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("POST", вхПараметры, СтруктураОтвет,Объект.MP);
		
		Если СтруктураОтвет.Отработало Тогда
			
			Результат = СтруктураОтвет.ДанныеОтвета;
			Если Результат.Свойство("error") тогда
				ТекстОшибки = Результат.error[0].info.message;
				лМассивВозврата.Добавить("Ответ сайта: "+ТекстОшибки);
			КонецЕсли;
			
			Если Результат.Свойство("success") тогда
				
				Если Результат.success[0].status="OK" Тогда
					СсылкаНаДокументПечати = СтруктураОтвет.ДанныеОтвета.success[0].doc;
					ПечатьДокументаПоСсылкеЗавершение(Новый Структура("Значение", Истина),Новый Структура("ИмяКоманды,СсылкаНаДокумент,MP", ИмяКоманды,СсылкаНаДокументПечати,Объект.MP), пПринтер);
				Иначе 
					текстОшибки=СтруктураОтвет.ДанныеОтвета.info.message;
					лМассивВозврата.Добавить(текстОшибки);
					
				КонецЕсли;
			Иначе
				
			КонецЕсли;
		Иначе 
			лМассивВозврата.Добавить(СтруктураОтвет.ТекстОшибки)
			
		КонецЕсли;
		//КонецЕсли;
		
	Иначе
		
		//предварительно надо получить номерТТН на сайте
		лМассивВозврата.Добавить("Печать возможна только после создания ТТН")
		
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	
	Попытка
		ЗаписатьJSON(ЗаписьJSON, лМассивВозврата); 		
	Исключение
		лтекст = ОписаниеОшибки();
	КонецПопытки;
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
	
КонецФункции

Процедура ПечатьДокументаПоСсылкеЗавершение(Результат, ДополнительныеПараметры, пИмяПринтера) Экспорт
	
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	СсылкаНаДокумент= ДополнительныеПараметры.СсылкаНаДокумент;
	//ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов", Не Результат.БольшеНеЗадаватьЭтотВопрос);
	
	Если Результат.Значение <> Истина Тогда
		Возврат;
	КонецЕсли;
	// получить документ по ссылке
	MP = Ложь;
	ДополнительныеПараметры.Свойство("MP", MP);
	
	//+Криворучко
	//врФайлПечатнойФормы=ПолучитьФайлССервера(СсылкаНаДокумент,MP);
	//                         Строка(Новый УникальныйИдентификатор())
	//УникальныйИдентификатор1 = ЭтаФорма.УникальныйИдентификатор;
	
	УникальныйИдентификатор1 = Строка(Новый УникальныйИдентификатор());
	Адрес = вгхОбщийПроцедурыФункцииСервер.ПолучитьФайлССервера(СсылкаНаДокумент, MP, УникальныйИдентификатор1, Истина);
	
	
	//ВремКаталог = "";
	//Выполнить("ВремКаталог = ПолучитьИмяВременногоФайла()");
	//СоздатьКаталог(ВремКаталог);
	//врФайлПечатнойФормы = ВремКаталог + "\temp.pdf";
	//
	//
	////Описание 		= Новый ОписаниеПередаваемогоФайла(врФайлПечатнойФормы,Адрес);
	////МассивОписаний 	= Новый Массив;
	////МассивОписаний.Добавить(Описание);
	////ПолучитьФайлы(МассивОписаний,,,Ложь);
	//////ПолучитьФайл(Адрес,врФайлПечатнойФормы,Ложь);
	//////-

	мфайл = Новый Файл(Адрес);
	
	//ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто);
	
	ИмяПринтера = пИмяПринтера;
	
	// проверить существует ли принтер на компе с таким именем
	//МассивПринтеров=ПолучитьМассивПринтеров();
	//Если МассивПринтеров.Найти(ИмяПринтера)=Неопределено Тогда
	//
	//	А = Новый Массив();
	//	А.Добавить(Новый ФорматированнаяСтрока("Имя принтера """+ИмяПринтера+""" не найдено.",Новый Шрифт(,12,Истина)));
	//	А.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+" Печать не возможна.",Новый Шрифт(,14,Истина)));
	//	
	//	Стр = Новый ФорматированнаяСтрока(А);
	//	ПоказатьПредупреждение(,стр);
	//	возврат;
	//КонецЕсли; 
	
	//ПоказатьОповещениеПользователя(НСтр("ru='Документ отправлен на печать';uk='Документ відправлен на друк'"),	, ,	БиблиотекаКартинок.Информация32);
	
	
	//WshShell = новый COMОбъект("WScript.Shell");
	////
	//ReturnCode = WshShell.Run("""C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe"" /t "+""""+Адрес+""""+" "+ИмяПринтера, 1, True);
	//ИмяРеквизита =?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),"СсылкаНаФайлТТННаСайте","СсылкаНаФайлЯрлыкиНаСайте");
	//СохранимЗначениеРеквизита(ИмяРеквизита, СсылкаНаДокумент);
	
	//Shell = Новый COMОбъект("Shell.Application");
	//Folder = Shell.Namespace(мфайл.Путь);
	//Folders = Folder.Items;
	//Для Каждого Folder0 Из Folders Цикл
	//	Folder0.InvokeVerbEx(ИмяПринтера);
	//КонецЦикла;
	//
	
	//AppShell = Новый COMОбъект("Shell.Application");
	//AppShell.ShellExecute(мфайл.ПолноеИмя, "", "", ИмяПринтера, 0);
	
	//AdobeAR = Новый Файл("C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe");
	//ОтправитьСразуНаПринтер = Ложь;
	////AdobeAR = Новый Файл("C:\Program Files\Adobe\Acrobat DC\Acrobat\Acrobat.exe");
	//Если AdobeAR.Существует() Тогда

	//    Если ОтправитьСразуНаПринтер Тогда
	//        // Параметры командной строки Acrobat Reader:
	//        // /o - не открывать диалоговое окно приложения
	//        // /h - открыть приложение и свернуть на панели задач
	//        // /p - открыть файл в приложении и сразу перейти к диалоговому окну печати
	//        // /t [ [ []]] - распечатать файл на указанном принтере

	//        ЗапуститьПриложение("""" + AdobeAR.ПолноеИмя + """ /o /t """ + мфайл.ПолноеИмя + """ """ + ИмяПринтера + """");
	//        // <директория приложения> /o /t <имя файла> <имя принтера>
	//    Иначе
	//        ЗапуститьПриложение(мфайл.ПолноеИмя);//открываем на просмотр средствами ОС
	//    КонецЕсли;

	//Иначе
	//    Сообщить("Не установлен Acrobat Reader DC! Печать невозможна!");
	//    ЗапуститьПриложение(мфайл.ПолноеИмя);//открываем на просмотр средствами ОС
	//КонецЕсли;
	
	Shell = Новый COMОбъект("Shell.Application");
    Folder = Shell.Namespace(мфайл.Путь);
    Folders = Folder.Items();
    Для Каждого Folder0 Из Folders Цикл
        Folder0.InvokeVerbEx(ИмяПринтера);
	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьСсылкуОтгрузкаПоЗаказу(пНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтгрузкаПоЗаказу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтгрузкаПоЗаказу КАК ОтгрузкаПоЗаказу
	|ГДЕ
	|	ОтгрузкаПоЗаказу.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер",пНомер);
	
	лРезультат =  Запрос.Выполнить().Выбрать();
	
	Если лРезультат.Следующий() Тогда	
		Возврат лРезультат[0].Ссылка; 	
	КонецЕсли;
	
	Возврат Документы.ОтгрузкаПоЗаказу.ПустаяСсылка();
	
КонецФункции 

//Процедура СохранимЗначениеРеквизита(ИмяРеквизита,ЗначениеРеквизита) Экспорт  
//	
//	мобъект = РеквизитФормыВЗначение("Объект");
//	мобъект[ИмяРеквизита] = ЗначениеРеквизита;
//	мобъект.Записать(РежимЗаписиДокумента.Проведение);
//	ЗначениеВРеквизитФормы(мобъект,"Объект");	
//	
//КонецПроцедуры
