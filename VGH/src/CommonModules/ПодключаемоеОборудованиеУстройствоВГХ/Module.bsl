// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции
// Функция возвращает версию установленного драйвера
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));

	Попытка
		ВыходныеПараметры[1] = ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьНомерВерсии(ОбъектДрайвера);
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции
// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
// Функция возвращает описание установленного драйвера
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = "";
	ОсновнойДрайверУстановлен = "";
	РевизияИнтерфейса         = "";
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьНомерВерсии(ОбъектДрайвера);
		ВыходныеПараметры[1] = ВерсияДрайвера;

		// Получаем описание драйвера
		ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьОписание(ОбъектДрайвера,
										НаименованиеДрайвера,
										ОписаниеДрайвера, 
										ТипОборудования, 
										РевизияИнтерфейса, 
										ИнтеграционнаяБиблиотека, 
										ОсновнойДрайверУстановлен, 
										URLЗагрузкиДрайвера);
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьПараметры(ОбъектДрайвера, ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		// Получаем дополнительные действия
		ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьДополнительныеДействия(ОбъектДрайвера, ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера';uk='Помилка отримання опису драйвера'"));
	КонецПопытки;
	
	Возврат Результат;

КонецФункции
// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	
	Попытка
		Ответ = ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ТестУстройства(ОбъектДрайвера, РезультатТеста, АктивированДемоРежим, Параметры);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>:';uk='Помилка виклику методу <ОбъектДрайвера.ТестУстройства>:'") + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции
// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера=Неопределено;
	
	Возврат Результат;
	
КонецФункции
// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);
	
											   
	Если Результат Тогда
		Ответ = ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.Подключить(ОбъектДрайвера, Параметры);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			//ПодключаемоеОборудованиеУстройствоВГХИнтерфейсВК.ПолучитьОшибку(ОбъектДрайвера, ВыходныеПараметры[1]);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

хх=1;	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение Х
	ИначеЕсли Команда = "ПолучитьРазмерХ" ИЛИ Команда = "outSizeX" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение Y
	ИначеЕсли Команда = "ПолучитьРазмерY" ИЛИ Команда = "outSizeY" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение Z
	ИначеЕсли Команда = "ПолучитьРазмерZ" ИЛИ Команда = "outSizeZ" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение веса
	ИначеЕсли Команда = "ПолучитьВес" ИЛИ Команда = "outVaga" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение Объема
	ИначеЕсли Команда = "ПолучитьОбъем" ИЛИ Команда = "outVolume" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	// Получение Объма и Веса
	ИначеЕсли Команда = "ПолучитьОбъемВес" ИЛИ Команда = "outVarAll" Тогда
		Результат = ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
	// Указанная команда не поддерживается данным драйвером
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;
		
	Возврат Результат;
КонецФункции // ()
// Функция осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВГХ(Команда,ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	//	ВыходныеПараметры.Добавить(888);  //ОбъектДрайвера.Вес);
	//Возврат Результат;	
	//ОбъектДрайвера.НомерТекущегоУстройства = ПараметрыПодключения.ИДУстройства;
	IndexProtocol=1;
	ТекстКомандыШ="%имякоманды%[IP:"+СокрЛП(ПараметрыПодключения.АйПиАдресс)+"]";
	ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%",Команда);
	//// установим параметрыОбращения к устройству
	//
	//проверяем доступ к устройству	
	IndexProtocol=1;
	txtOut = ОбъектДрайвера.GetProtocolAnton(IndexProtocol, ТекстКоманды,
													Параметры.adrServ, 
													Параметры.portServ,
													Параметры.portClient,
													Параметры.timeRecvWait_x10ms);
	Если  стрНайти(txtOut,"Error") тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(txtOut);
		Результат=Ложь;
		//
		//ДанныеСУстройства.Вставить("Успешно",Ложь);
		//ДанныеСУстройства.Вставить("ТекстОшибки","Нет подключения к устройству. "+txtOut);
		//Возврат ДанныеСУстройства;
	Иначе
		ВыходныеПараметры.Добавить(txtOut);  //ОбъектДрайвера.Вес);
		
	КонецЕсли;
	Возврат Результат;
	
	Если ОбъектДрайвера.Результат = 0 Тогда
		ВыходныеПараметры.Добавить(ОбъектДрайвера.Вес);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции
