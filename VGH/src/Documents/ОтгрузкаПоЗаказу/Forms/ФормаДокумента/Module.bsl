
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	Дата=ТекущаяДата();
	//хх=ПараметрыСеанса;
	//нн=глПодключаемоеОборудование;
	//Если Параметры.ТекущееУстройство Тогда
	//
	//КонецЕсли; 
	ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	//ТекущееРабочееМесто=Параметры.ТекущееУстройство.РабочееМесто ;
	ТекущееУстройство=ПараметрыСеанса.ТекущееУстройство ;
	
	//СистемнаяИнформация = Новый СистемнаяИнформация();
	//ПараметрыРабочегоМеста     = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРабочегоМеста(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	//ТекущееРабочееМесто = ПараметрыРабочегоМеста.ТекущееРабочееМесто;
	//ТекущееУстройство   = ПараметрыРабочегоМеста.Устройство_ВГХ;
	Если Параметры.Ключ.Пустая() Тогда
		//ИЛИ (Параметры.Свойство("Действие") и параметры.Действие="ДобавитьГрузовоеМесто")   
		Объект.ГрузовыеМеста.Добавить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Элементы.
	Дата=ТекущаяДата();
	//хх=ПараметрыСеанса;
	нн=глПодключаемоеОборудование;
	Если НЕ ЗначениеЗаполнено(ТекущееУстройство) Тогда
		//Отказ=Истина;
		Текст = НСтр("ru='Нельзя создать документ отгрузка без выбранного устройства ВГХ';uk='Нельзя создать документ отгрузка без выбранного устройства ВГХ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		//Возврат
	КонецЕсли; 
	Элементы.Весы.Заголовок=ТекущееУстройство;
	ЭтаФорма.ТекущийЭлемент=Элементы.order;
КонецПроцедуры


#Область ОбработчикиКоманд
&НаСервере
Функция ПолучитьВГХСервер(ТекущееУстройство)
	ДанныеСУстройства=Новый Структура();
	КомОбъектУстройства=Неопределено;
	хх=1;
	Попытка
		КомОбъектУстройства=Новый COMОбъект("PAntonXP_DLL.PAnton");
	Исключение
		ТекстОшибки=ОписаниеОшибки();
		ДанныеСУстройства.Вставить("Успешно",Ложь);
		ДанныеСУстройства.Вставить("ТекстОшибки","Не удалось создать КОМ объект. "+ТекстОшибки);
		Возврат ДанныеСУстройства;
	КонецПопытки;
	IndexProtocol=1;
	ТекстКомандыШ="%имякоманды%[IP:"+СокрЛП(ТекущееУстройство.adrClient)+"]";
	ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%","outVarAll");
	//// установим параметрыОбращения к устройству
	//
	//проверяем доступ к устройству	
	txtOut = КомОбъектУстройства.GetProtocolAnton(IndexProtocol, ТекстКоманды,
													ТекущееУстройство.adrServ, 
													ТекущееУстройство.portServ,
													ТекущееУстройство.portClient,
													ТекущееУстройство.timeRecvWait_x10ms);
	Если  найти(txtOut,"Error") тогда
		ДанныеСУстройства.Вставить("Успешно",Ложь);
		ДанныеСУстройства.Вставить("ТекстОшибки","Нет подключения к устройству. "+txtOut);
		Возврат ДанныеСУстройства;
	КонецЕсли;
	//Читаем ВГХ
	Попытка
		ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%","outSizeX");
		IndexProtocol = КомОбъектУстройства.GetIndex(IndexProtocol);
		seat_length = ВыделитьЧислоИзСтрокиОтУстройства(КомОбъектУстройства.GetProtocolAnton(IndexProtocol, ТекстКоманды, 
																		ТекущееУстройство.adrServ, 
																		ТекущееУстройство.portServ,
																		ТекущееУстройство.portClient,
																		ТекущееУстройство.timeRecvWait_x10ms));
		ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%","outSizeY");
		IndexProtocol = КомОбъектУстройства.GetIndex(IndexProtocol);
		seat_width = ВыделитьЧислоИзСтрокиОтУстройства(КомОбъектУстройства.GetProtocolAnton(IndexProtocol, ТекстКоманды, 
																		ТекущееУстройство.adrServ, 
																		ТекущееУстройство.portServ,
																		ТекущееУстройство.portClient,
																		ТекущееУстройство.timeRecvWait_x10ms));
		ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%","outSizeZ");
		IndexProtocol = КомОбъектУстройства.GetIndex(IndexProtocol);
		seat_height = ВыделитьЧислоИзСтрокиОтУстройства(КомОбъектУстройства.GetProtocolAnton(IndexProtocol, ТекстКоманды, 
																		ТекущееУстройство.adrServ, 
																		ТекущееУстройство.portServ,
																		ТекущееУстройство.portClient,
																		ТекущееУстройство.timeRecvWait_x10ms));
		ТекстКоманды = СтрЗаменить(ТекстКомандыШ,"%имякоманды%","outVaga");
		IndexProtocol = КомОбъектУстройства.GetIndex(IndexProtocol);
		seat_weight = ВыделитьЧислоИзСтрокиОтУстройства(КомОбъектУстройства.GetProtocolAnton(IndexProtocol,ТекстКоманды ,
																		ТекущееУстройство.adrServ, 
																		ТекущееУстройство.portServ,
																		ТекущееУстройство.portClient,
																		ТекущееУстройство.timeRecvWait_x10ms));
		ДанныеСУстройства=Новый Структура("seat_width,seat_length,seat_height,seat_weight",seat_width/10,seat_length/10,seat_height/10,seat_weight/1000);
		
		ДанныеСУстройства.Вставить("Объем",(ДанныеСУстройства.seat_width*ДанныеСУстройства.seat_length*ДанныеСУстройства.seat_height)/1000); // в дц.куб
		ДанныеСУстройства.Вставить("Успешно",Истина);
	Исключение 
		хх=ОписаниеОшибки();
		ДанныеСУстройства.Вставить("Успешно",Ложь);
		ДанныеСУстройства.Вставить("ТекстОшибки","Не удалось прочитать ВГХ с устройства. По причине "+хх);
		Возврат ДанныеСУстройства;
	КонецПопытки;
	
	Возврат  ДанныеСУстройства;
КонецФункции // ()
&НаСервереБезКонтекста
Функция ПолучитьПараметрыРабочегоМеста(Место)
	
Возврат Место.АйПиАдрес;	
КонецФункции

&НаКлиенте
Процедура ПолучитьВГХ(Команда)
	// Вставить содержимое обработчика
	#Если ВебКлиент Тогда
		
		лСтруктураОтвета = ПолучитьРазмерыПОВеб();
		Если НЕ лСтруктураОтвета.Ошибка Тогда  			
			ЗаполнитьЗначенияСвойств(Элементы.ГрузовоеМесто.ТекущиеДанные, лСтруктураОтвета.Результат);
			Объект.ВГХВыгружены=Истина; 			
		КонецЕсли;
				
	#Иначе
		ИмяТабличнойЧасти="ГрузовоеМесто";
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОшибки="";
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,ТекущееУстройство,ОписаниеОшибки);
			Если Результат Тогда
				ВходныеПараметры  = Новый Массив;
				АйПиАдрес=ПолучитьПараметрыРабочегоМеста(ТекущееРабочееМесто);
				ВходныеПараметры.Добавить(АйПиАдрес);
				ВыходныеПараметры = Неопределено;
				// выполним команду 
				// Выполнитьтест устройства
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,"outVarAll",ВходныеПараметры,ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При получении ВГХ произошла ошибка."
					"Результат не получен."
					"Дополнительное описание:"
					"%ДополнительноеОписание%';uk='При получении ВГХ произошла ошибка."
					"Результат не получен."
					"Додатковий опис:"
					"%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					"%ДополнительноеОписание%",
					ВыходныеПараметры[1]);
					ПоказатьПредупреждение(,ТекстСообщения,60,"Ошибка на весах");
					Возврат;
				КонецЕсли;
				
				
				ДанныеСУстройства=Новый Структура;
				ИмяКоманды="outSizeX";
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,ИмяКоманды,ВходныеПараметры,ВыходныеПараметры);
				Если Результат Тогда
					РезультатX=ВыходныеПараметры[0];
					ДанныеСУстройства.Вставить("seat_length",ВыделитьЧислоИзСтрокиОтУстройства(ВыходныеПараметры[0])/10);
				КонецЕсли; 
				ИмяКоманды="outSizeY";
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,ИмяКоманды,ВходныеПараметры,ВыходныеПараметры);
				Если Результат Тогда
					РезультатX=ВыходныеПараметры[0];
					ДанныеСУстройства.Вставить("seat_width",ВыделитьЧислоИзСтрокиОтУстройства(ВыходныеПараметры[0])/10);
				КонецЕсли; 
				ИмяКоманды="outSizeZ";
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,ИмяКоманды,ВходныеПараметры,ВыходныеПараметры);
				Если Результат Тогда
					РезультатX=ВыходныеПараметры[0];
					ДанныеСУстройства.Вставить("seat_height",ВыделитьЧислоИзСтрокиОтУстройства(ВыходныеПараметры[0])/10);
				КонецЕсли; 
				ИмяКоманды="outVaga";
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,ИмяКоманды,ВходныеПараметры,ВыходныеПараметры);
				Если Результат Тогда
					РезультатX=ВыходныеПараметры[0];
					ДанныеСУстройства.Вставить("seat_weight",ВыделитьЧислоИзСтрокиОтУстройства(ВыходныеПараметры[0])/1000);
				КонецЕсли; 
				ИмяКоманды="outVolume";
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ТекущееУстройство,ИмяКоманды,ВходныеПараметры,ВыходныеПараметры);
				Если Результат Тогда
					РезультатX=ВыходныеПараметры[0];
					ДанныеСУстройства.Вставить("Объем",ВыделитьЧислоИзСтрокиОтУстройства(ВыходныеПараметры[0])/1000000);
				КонецЕсли; 
				
				Если Результат  Тогда
					ЗаполнитьЗначенияСвойств(Элементы.ГрузовоеМесто.ТекущиеДанные,ДанныеСУстройства);
					Объект.ВГХВыгружены=Истина;
				Иначе
					ТекстСообщения = НСтр("ru='При получении ВГХ произошла ошибка."
					"ВГХ не напечатаны на %Устройство%."
					"Дополнительное описание:"
					"%ДополнительноеОписание%';uk='При получении ВГХ відбулася помилка."
					"ВГХ не напечатаны на %Устройство%."
					"Додатковий опис:"
					"%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Устройство%",ТекущееУстройство);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					"%ДополнительноеОписание%",
					ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,ТекущееУстройство);
			Иначе
				//ТекстСообщения= НСтр("ru = 'При подключении %Устройство% произошла ошибка.
				//"Дополнительное описание:"
				//			"%ДополнительноеОписание%'
				//			; 
				//
				//uk = 'При подключении %Устройство% произошла ошибка.'");;
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;																					  
		Иначе
			ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	#КонецЕсли
	
	//МенеджерОборудованияУстройствоВГХКлиент.ПолучениеВГХСлектронныхВесов(ЭтотОбъект,"outVarAll", ИмяТабличнойЧасти);
	Возврат;
	//текСтрока=Элементы.ГрузовоеМесто.ТекущаяСтрока;
	//Если текСтрока=Неопределено Тогда
	//	ПоказатьПредупреждение(,"Не выбрано грузовое место!");
	//	Возврат;
	//КонецЕсли; 
	////ПараметрыПодключения=ПолучитьПараметрыПодключенияУстройства();
	//// Подключаем компоненту читаем данные возвращаем структуру с данными
	//ДанныеСУстройства=ПолучитьВГХСервер(ТекущееУстройство);
	//Если ДанныеСУстройства.Свойство("Успешно") и ДанныеСУстройства.Успешно Тогда
	//	ЗаполнитьЗначенияСвойств(Элементы.ГрузовоеМесто.ТекущиеДанные,ДанныеСУстройства);
	//	Объект.ВГХВыгружены=Истина;
	//Иначе	
	//	ПоказатьПредупреждение(,ДанныеСУстройства.ТекстОшибки);
	//КонецЕсли; 
КонецПроцедуры
&НаСервере
Функция ПолучитьРазмерыПОВеб()
	
	лСтруктураОтвета =Новый Структура("Результат,Ошибка", Новый Структура, Ложь);
	лURLАдрес = "10.97.99.34:8080";
	Соединение = Новый HTTPСоединение(лURLАдрес);
	
	Запрос = Новый HTTPЗапрос("/vgh_odessa/hs/weights/get_size/outSizeX");
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		ОтветСайта 				   = Ответ.ПолучитьТелоКакСтроку("windows-1251"); //получим HTML-код страницы 
		ОтветСайта 				   = СтрЗаменить(ОтветСайта,"[","");
		ОтветСайта 				   = СтрЗаменить(ОтветСайта,"]","");
		лСтруктураОтвета.Результат =	ПрочитатьНаСервереJSON(ОтветСайта);
	Иначе
		Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы
		лСтруктураОтвета.Ошибка = Истина;
	КонецЕсли;
	
	Возврат лСтруктураОтвета;
	
КонецФункции

&НаСервере
Функция ПрочитатьНаСервереJSON(ОтветСайта)
	
	ЧтениеJson = Новый ЧтениеJSON; 	
	ЧтениеJson.УстановитьСтроку(ОтветСайта);
		
	Возврат ПрочитатьJSON(ЧтениеJson);
	
КонецФункции
&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
	
КонецПроцедуры
Процедура ОбновитьПодвалФормы()
	
	//СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
	//ИтогВсего = Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС;
	//ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки;
	Объект.Мест = Объект.ГрузовыеМеста.Количество();
КонецПроцедуры

#КонецОбласти
&НаСервереБезКонтекста
Функция ВыделитьЧислоИзСтрокиОтУстройства(Строка)
	//пример строки SizeX{12}
	если найти(Строка,"Error") тогда Возврат 0 КонецЕсли;
	МассивПодстрок=СтрРазделить(Строка,"{",);
	строкасчислом=МассивПодстрок[1];
	хх=СтрЗаменить(строкасчислом,"}","" );
	Возврат Число(хх);
КонецФункции // ()



&НаСервере
Процедура ЗаписатьОбъектНаСервере()
	мОбъект=РеквизитФормыВЗначение("Объект");
	мОбъект.Записать();
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры

&НаСервере
Функция ПрочитатьJSONСервер(пJSONтекст)

	  Возврат ПрочитатьJSON(пJSONтекст);

КонецФункции 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Вставить содержимое обработчика
	ПосчитатьКоличествоМест();
КонецПроцедуры
&НаСервере
Процедура ПосчитатьКоличествоМест()
  мОбъект=РеквизитФормыВЗначение("Объект");
	мОбъект.Мест= мОбъект.ГрузовыеМеста.Количество();
  ЗначениеВРеквизитФормы(мОбъект,"Объект" );
КонецПроцедуры
&НаСервереБезКонтекста
Функция ВыполнитьПроверкуНаСервере(ПараметрыПодключения,ОписаниеОшибки)
	Соединение=ОбменСМанжента.ПолучитьHTTPСоединение(ПараметрыПодключения,ОписаниеОшибки);
	Если Соединение=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура orderПриИзменении(Элемент)
		//***Д***//
	ПрефиксМаркетПлейс = ВернутьПрефиксМаркетПлейса();
	Если не ПустаяСтрока(ПрефиксМаркетПлейс) и не Объект.MP Тогда
		Объект.MP = СтрНайти(Объект.order,ПрефиксМаркетПлейс) <> 0  или СтрДлина(СокрЛП(Объект.order)) = 18; 
	КонецЕсли;
	//***Д***//

	// ПРВЕРИТЬ ЧТО ВВЕДЕННЫЙ НОМЕР ЕСТЬ НА САЙТЕ
	//Если ЗначениеЗаполнено(Order) Тогда
	//	ПараметрыСайта=ПланыОбмена.ОбменсСайтом.ПолучитьПараметрыАктивногоСайта();
	//	Если ЗначениеЗаполнено(ПараметрыСайта) Тогда
	//		// выполним подключение к сайту и проверку Order-а на сервере
	//		ОписаниеОшибки="";
	//		ПараметрыСайта.Вставить("Order",Order);
	//		Результат=ВыполнитьПроверкуНаСервере(ПараметрыСайта,ОписаниеОшибки);
	//	Иначе
	//		//Нет параметров подключения к сайту
	//		
	//		Возврат;
	//	КонецЕсли; 
	//Иначе
	//	Возврат;
	//КонецЕсли;
	//возврат;
	//ОбработчикОбменСМанжентаКлиент.ПроверитьЗаказНаСайте(ЭтотОбъект);
	//ЕстьНаСайте=ПроверитьНомерНаСайте(Объект.order);  
	Если ПроверитьНомерНаСайте(Объект.order) ТОгда
		// проверим нет ли документа в 1С
		ДокСсылка=вгхОбщиеПроцедурыИФункции.ПолучитьДокументОтгрузка(Объект.order);
		Если ДокСсылка=ПредопределенноеЗначение("Документ.ОтгрузкаПоЗаказу.ПустаяСсылка") Тогда
			// по заказу отгрузок не было надо создать новый
			//НовСтрока=Объект.ГрузовыеМеста.Добавить();
			//Элементы.ГрузовоеМесто.ТекущаяСтрока = Новстрока.ПолучитьИдентификатор();
			ЭтаФорма.ТекущийЭлемент=Элементы.ГрузовоеМесто;
		Иначе	
			//  по заказу были отгрузки спросить добавляем грузовое место
			Режим = РежимДиалогаВопрос.ДаНет;
			мПараметры=Новый Структура("ДокСсылка",ДокСсылка);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, мПараметры);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'По заказу уже были отгрузки.
			| Добавить новое грузовое место к заказу ';"
			+ " en = 'Do you want to continue?'"), Режим, 0);
		КонецЕсли; 
	Иначе
		ПоказатьПредупреждение( ,"Такого номера заказа нет на сайте.",,"Поиск заказа по номеру: "+Объект.order);
	КонецЕсли;
	Возврат;
КонецПроцедуры


&НаСервере
Функция ВернутьПрефиксМаркетПлейса()
  Возврат Константы.ПрефиксМаркетПлейса.Получить();
КонецФункции
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	// закроем эту форму
	ЭтаФорма.Модифицированность = Ложь;
 	ЭтаФорма.Закрыть();
	
	ДокСсылка=Параметры.ДокСсылка;
	Параметры.Вставить("Ключ",ДокСсылка);
	Параметры.вставить("Действие","ДобавитьГрузовоеМесто");
	ОткрытьФорму("Документ.ОтгрузкаПоЗаказу.ФормаОбъекта",Параметры);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНомерНаСайте(Номер)
	//https://dev.ants.co.ua/api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=100925836
	//https://dev.ants.co.ua/api/rest/parcel?key=9a23a849787bb1388b8b8fa23f3aa789&order=100925836

	Результат=Ложь;
	СтруктураОтвет = Новый Структура("ДанныеОтвета,Отработало,ТекстОшибки,КодОтвета","",Истина,"",200);

	ПараметрыЗапроса=Новый Структура("order,key",Номер);

	вхПараметры=Новый Структура("ИмяМетода,Order,ПараметрыЗапроса","parcel",Номер,ПараметрыЗапроса);
	вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("GET",вхПараметры ,СтруктураОтвет,Объект.MP);
	//ОбменСМанжента.ПолучитьРезультатНаСервере("GET",вхПараметры ,СтруктураОтвет);
	Если  СтруктураОтвет.Отработало Тогда
		Если СтруктураОтвет.ДанныеОтвета.Свойство("success") Тогда
			ЗаполнитьДокументНаСервере(СтруктураОтвет.ДанныеОтвета.success[0]);
			//Успешно
			Результат =истина;
		ИначеЕсли СтруктураОтвет.ДанныеОтвета.Свойство("error") Тогда
			// неУспешно
			Результат =ложь;
		КонецЕсли; 
	иначе
		Результат =ложь;
	КонецЕсли; 
	Возврат Результат;
КонецФункции // ПроверитьНомерНаСайте()
&НаСервере
Функция ЗаполнитьДокументНаСервере(Данные)
	мОбъект=РеквизитФормыВЗначение("Объект");
	мОбъект.ГрузовыеМеста.Очистить();
	мГрузовыеМеста=Данные.data.cargo;
	Для каждого мМесто Из мГрузовыеМеста Цикл
		мСумма="";
		Для каждого Эл Из мМесто Цикл
		    мСумма=мСумма+(мместо[Эл.Ключ]);
		КонецЦикла;
		Если ЗначениеЗаполнено(мСумма) Тогда
		   	НоваяСтрока=мОбъект.ГрузовыеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,мМесто);
			НоваяСтрока.Объем=НоваяСтрока.seat_width*НоваяСтрока.seat_length*НоваяСтрока.seat_height;
		КонецЕсли;
	КонецЦикла;
	мТовары=Данные.data.products;
	Для каждого Товар Из мТовары Цикл
		НоваяСтрока=мОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Товар);
	КонецЦикла;
	Если НЕ мОбъект.ГрузовыеМеста.Количество()  Тогда
		 //Добавимодну пустую строку
	     мОбъект.ГрузовыеМеста.Добавить();
	КонецЕсли;
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецФункции // ()
&НаСервере
Процедура СохранимПолученныйНомерВДокументе(ДокСсылка,НомерНакладной)    экспорт
мобъект=РеквизитФормыВЗначение("Объект");
мобъект.НомерТТН=НомерНакладной;
мобъект.Записать(РежимЗаписиДокумента.Проведение);
ЗначениеВРеквизитФормы(мобъект,"Объект");	

КонецПроцедуры
&НаСервере
Процедура СохранимПолученноеЗначениеРеквизита(ИмяРеквизита,ЗначениеРеквизита) Экспорт  
	мобъект=РеквизитФормыВЗначение("Объект");
	мобъект[ИмяРеквизита]=ЗначениеРеквизита;
	мобъект.Записать(РежимЗаписиДокумента.Проведение);
	ЗначениеВРеквизитФормы(мобъект,"Объект");	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто)
	
	Возврат Новый Структура("ИмяПринтераДокументов,ИмяПритераЭтикеток",ТекущееРабочееМесто.ИмяПринтераДокументов,ТекущееРабочееМесто.ИмяПринтераЭтикеток);	
	
КонецФункции // ПолучитьИмяПринтераНаСервере()

&НаКлиенте
Процедура ОтправитьИПолучитьТТН(Команда)
	// перепишем данные формы в документ

	СтруктураОтвет = Новый Структура;	
	СтруктураОтвет.Вставить("ДанныеОтвета", "");
	СтруктураОтвет.Вставить("Отработало", Истина);
	СтруктураОтвет.Вставить("ТекстОшибки", "");
	СтруктураОтвет.Вставить("КодОтвета", 200);

	// массив структур
	ЗаписатьОбъектНаСервере();
	ТекущаяСсылка=Объект.Ссылка;
	ДанныеВГХ=вгхОбщийПроцедурыФункцииСервер.ПолучитьДанныеНаСервере(Объект.Ссылка);
	ДанныеТоваров=вгхОбщийПроцедурыФункцииСервер.ПолучитьДанныеТоваровНаСервере(Объект.Ссылка);
	РезультатКонтроля=Новый Структура;
	МассивСообщений = Новый Массив; 
	КонтрольДанныхВГХ(ДанныеВГХ,СтруктураОтвет);
	Если СтруктураОтвет.Отработало Тогда
		// отправить ВГХ на сайт
		ОтправитьВГХНаСайт(объект.order,ДанныеВГХ,ДанныеТоваров,СтруктураОтвет);
		// анализируем ответ
		Если СтруктураОтвет.Отработало Тогда
			Результат=СтруктураОтвет.ДанныеОтвета;
			Если Результат.Свойство("success") И Результат.success[0].status="OK" Тогда
				Объект.ДанныеВГХОтправленыНаСайт=Истина;
				СохранимПолученноеЗначениеРеквизита("ДанныеВГХОтправленыНаСайт",Истина);
				А=Новый Массив;
				А.Добавить("Добавление ВГХ: ");
				А.Добавить(Новый ФорматированнаяСтрока("ВГХ успешно добавлены к заказу №"+СокрЛП(Строка(объект.order))+Символы.ПС,	Новый Шрифт(,,Истина)));
				МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
				// получить ТТН
				ПараметрыЗапроса=Новый Структура("order,key",Объект.order);
				вхПараметры=Новый Структура("ИмяМетода,ПараметрыЗапроса","ttn",ПараметрыЗапроса);
				СтруктураОтвет = Новый Структура("ДанныеОтвета,Отработало,ТекстОшибки,КодОтвета","",Истина,"",200);
				вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("POST",вхПараметры ,СтруктураОтвет, Объект.MP);
				Если СтруктураОтвет.Отработало Тогда
					ДанныеОтвета=СтруктураОтвет.ДанныеОтвета;
					Если ДанныеОтвета.Свойство("Error") Тогда
						текстОшибки=ДанныеОтвета.error[0].info.message;
						А=Новый Массив;
						А.Добавить("Получение ТТН: Ошибка: ");
						А.Добавить(Новый ФорматированнаяСтрока(текстОшибки,Новый Шрифт(,,Истина)));
						МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
					ИначеЕсли ДанныеОтвета.Свойство("success") И ДанныеОтвета.success[0].status="OK" Тогда
						//вернем номер созданной накладной
						мНомерНакладной=ДанныеОтвета.success[0].np_number;
						СохранимПолученноеЗначениеРеквизита("НомерТТН",мНомерНакладной);
						//Запишем в документ номер накладной
						//СохранимПолученныйНомерВДокументе(,НомерНакладной);
						ЭтотОбъект.ОбновитьОтображениеДанных();
						//Элементы.СписокОтгрузок.Обновить();
						А=Новый Массив;
						А.Добавить("Получение ТТН: - ТТН успешно создана.");
						МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
					Иначе
						текстОшибки=СтруктураОтвет.ДанныеОтвета.info.message;
						А=Новый Массив;
						А.Добавить("Получение ТТН: Ошибка: ");
						А.Добавить(Новый ФорматированнаяСтрока(
						текстОшибки,
						Новый Шрифт(,,Истина)));
						МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
					КонецЕсли;
				Иначе
					А=Новый Массив;
					А.Добавить("Ошибка: ");
					А.Добавить(Новый ФорматированнаяСтрока(
					СтруктураОтвет.ТекстОшибки,
					Новый Шрифт(,,Истина)));
					МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
				КонецЕсли; 
			ИначеЕсли  Результат.Свойство("error")  Тогда
				текстошибки=Результат.error[0].info.message ;
				А = Новый Массив();
				А.Добавить("Ошибка: ");
				А.Добавить(Новый ФорматированнаяСтрока(
				ТекстОшибки,
				Новый Шрифт(,,Истина)));
				МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
			КонецЕсли; 
		Иначе
			А = Новый Массив();
			А.Добавить("Ошибка в ответе сайта: ");
			А.Добавить(Новый ФорматированнаяСтрока(
			СтруктураОтвет.ТекстОшибки,
			Новый Шрифт(,,Истина)));
			МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
		КонецЕсли;
	Иначе
		А = Новый Массив();
		А.Добавить("Ошибка Проверки ВГХ: ");
		А.Добавить(Новый ФорматированнаяСтрока(
							СтруктураОтвет.ТекстОшибки,
							Новый Шрифт(,,Истина)));
		МассивСообщений.Добавить( Новый ФорматированнаяСтрока(А));
	КонецЕсли;
	Стр = Новый ФорматированнаяСтрока(МассивСообщений);
	ПоказатьПредупреждение(,стр);
КонецПроцедуры

&НаКлиенте
Функция КонтрольДанныхВГХ(ДанныеВГХ,СтруктураОтвет)
	ТекстОшибки="";
	номСтроки=0;
	Для каждого строка Из ДанныеВГХ Цикл
		номСтроки=номСтроки+1;
		Для каждого Показатель Из строка Цикл
			Если НЕ ЗначениеЗаполнено(Строка[Показатель.Ключ]) Тогда
				СтруктураОтвет.Вставить("Отработало",Ложь);
				ТекстОшибки=ТекстОшибки+?(ЗначениеЗаполнено(ТекстОшибки),Символы.ПС,"");
				ТекстОшибки=ТекстОшибки+"В строке № "+Строка(номСтроки)+" не заполнено поле "+Показатель.Ключ;
				прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	СтруктураОтвет.ТекстОшибки=ТекстОшибки;
возврат СтруктураОтвет;	
КонецФункции // ()
 
&НаСервере
Процедура ОтправитьВГХНаСайт(order,ДанныеВГХ,ДанныеТоваров,СтруктураОтвет)
	//Формируем параметры запроса
	ПараметрыЗапроса=Новый Структура;     
	ПараметрыЗапроса.Вставить("key","");
	ПараметрыЗапроса.Вставить("order" ,order);
	ПараметрыЗапроса.Вставить("data",ДанныеВГХ);
	ПараметрыЗапроса.Вставить("skus",ДанныеТоваров);
	вхПараметры=Новый Структура("ИмяМетода,ПараметрыЗапроса","parcel",ПараметрыЗапроса);
	
	вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("POST",вхПараметры ,СтруктураОтвет,Объект.MP);
	Возврат;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ГрузовоеМестоseat_widthПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ГрузовоеМестоseat_heightПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
//нвг 09-11-2020
&НаСервере
Процедура СохранимЗначениеРеквизита(ИмяРеквизита,ЗначениеРеквизита) Экспорт  
	мобъект=РеквизитФормыВЗначение("Объект");
	мобъект[ИмяРеквизита]=ЗначениеРеквизита;
	мобъект.Записать(РежимЗаписиДокумента.Проведение);
	ЗначениеВРеквизитФормы(мобъект,"Объект");	
КонецПроцедуры
&НаКлиенте
Процедура Печать_NEW(Команда)
	
	#Если ВебКлиент Тогда
		
	#Иначе
		
		ИмяКоманды=Команда.Имя;
		
		ИмяРеквизита=?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),"СсылкаНаФайлТТННаСайте","СсылкаНаФайлЯрлыкиНаСайте");
		
		// Проверка принтеров
		ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто);
		ИмяПринтера = ?(СтрНачинаетсяС(ИмяКоманды,"ТТН"), ПараметрыПечати.ИмяПринтераДокументов, ПараметрыПечати.ИмяПритераЭтикеток);
		
		// проверить существует ли принтер на компе с таким именем
		МассивПринтеров=ПолучитьМассивПринтеров();
		
		Если ЗначениеЗаполнено(объект.НомерТТН) Тогда
			//есть номерТТН, печатаем
			//проверим есть ли ссылка на файл, если есть то уже печатали
			Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
				//уже печатали, спросить о повторной печати
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru='Распечатать';uk='Роздрукувати'"));
				Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru='Не печатать';uk='Не друкувати'"));
				
				мПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
				мПараметры.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
				мПараметры.Заголовок = НСтр("ru='Документ уже печатался. Отправить на печать повторно?';uk='Документ уже печатался. Отправить на печать повторно?'");
				мПараметры.КнопкаТаймаута = КодВозвратаДиалога.Нет;
				мПараметры.БольшеНеЗадаватьЭтотВопрос = Ложь;  //ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов;
				
				Оповещение= Новый ОписаниеОповещения("ПечатьДокументаПоссылкеЗавершение", ЭтотОбъект,	Новый Структура("ИмяКоманды,СсылкаНаДокумент,MP",ИмяКоманды, Объект[ИмяРеквизита],Объект.MP));
				СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю( Оповещение,	НСтр("ru='Распечатать ТТН документов на принтере?';uk='Роздрукувати комплект документів на принтері?'"),Кнопки,мПараметры);
				Возврат ;
			Иначе
				//надо получить файл на сервере
				СтруктураОтвет = Новый Структура("ДанныеОтвета,Отработало,ТекстОшибки,КодОтвета","",Истина,"",200);	
				
				текДокумент = Объект.Ссылка;
				мOrder = Объект.order;
				
				ПараметрыЗапроса = ?(СтрНачинаетсяС(ИмяКоманды, "ТТН"), Новый Структура("order,type,key",мOrder,"docs"), Новый Структура("order,type,key",мorder,"sticker"));
				
				вхПараметры = Новый Структура("ИмяМетода,ПараметрыЗапроса", "print", ПараметрыЗапроса);
				
				Результат = Неопределено;
				
				// запрос на сайте ссылки на документа для печати
				вгхОбщийПроцедурыФункцииСервер.ПолучитьРезультатНаСервере("POST",вхПараметры ,СтруктураОтвет,Объект.MP);
				
				Если СтруктураОтвет.Отработало Тогда
					
					Результат=СтруктураОтвет.ДанныеОтвета;
					Если Результат.Свойство("error") тогда
						ТекстОшибки = Результат.error[0].info.message;
						ПоказатьПредупреждение(,"Ответ сайта: "+ТекстОшибки,);
						Возврат;
					КонецЕсли;
					
					Если Результат.Свойство("success") тогда
						
						Если Результат.success[0].status="OK" Тогда
							СсылкаНаДокументПечати=СтруктураОтвет.ДанныеОтвета.success[0].doc;
							ПечатьДокументаПоСсылкеЗавершение(Новый Структура("Значение",КодВозвратаДиалога.Да),Новый Структура("ИмяКоманды,СсылкаНаДокумент,MP,НомерДокумента",ИмяКоманды,СсылкаНаДокументПечати,Объект.MP,Объект.order));
						Иначе 
							текстОшибки=СтруктураОтвет.ДанныеОтвета.info.message;
							А = Новый Массив();
							А.Добавить("Ошибка: ");
							А.Добавить(Новый ФорматированнаяСтрока(
							текстОшибки,
							Новый Шрифт(,,Истина)));
							Стр = Новый ФорматированнаяСтрока(А);
							ПоказатьПредупреждение(,стр,);
							хх=1;
						КонецЕсли;
					Иначе
						
					КонецЕсли;
				Иначе 
					А = Новый Массив();
					А.Добавить("Ошибка: ");
					А.Добавить(Новый ФорматированнаяСтрока(
					СтруктураОтвет.ТекстОшибки,
					Новый Шрифт(,,Истина)));
					Стр = Новый ФорматированнаяСтрока(А);
					ПоказатьПредупреждение(,стр,);
					Возврат;
					хх=1;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			//предварительно надо получить номерТТН на сайте
			А = Новый Массив();
			А.Добавить("Предупреждение: ");
			А.Добавить(Новый ФорматированнаяСтрока(	"Печать возможна только после создания ТТН",Новый Шрифт(,,Истина)));
			Стр = Новый ФорматированнаяСтрока(А);
			ПоказатьПредупреждение(,стр);
			возврат;
			
		КонецЕсли;
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументаПоСсылкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяКоманды=ДополнительныеПараметры.ИмяКоманды;
	СсылкаНаДокумент= ДополнительныеПараметры.СсылкаНаДокумент;
	//ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов", Не Результат.БольшеНеЗадаватьЭтотВопрос);
	
	Если Результат.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	// получить документ по ссылке
	MP = Ложь;
	ДополнительныеПараметры.Свойство("MP",MP);
	НомерДокумента = "";
	ДополнительныеПараметры.Свойство("НомерДокумента", НомерДокумента);
	
	//+Криворучко
	//врФайлПечатнойФормы=ПолучитьФайлССервера(СсылкаНаДокумент,MP);
	//
	УникальныйИдентификатор1 = ЭтаФорма.УникальныйИдентификатор;
	Адрес = вгхОбщийПроцедурыФункцииСервер.ПолучитьФайлССервера(СсылкаНаДокумент,MP,УникальныйИдентификатор1,,НомерДокумента);
	#Если ВебКлиент Тогда //***д***//
		Каталог = КаталогВременныхФайлов();
		ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".pdf";
		врФайлПечатнойФормы = Каталог + ИмяФайла;
	#Иначе
		ВремКаталог = "";
		Выполнить("ВремКаталог = ПолучитьИмяВременногоФайла()");
		СоздатьКаталог(ВремКаталог);
		врФайлПечатнойФормы = ВремКаталог + "\temp.pdf";
	#КонецЕсли   //***д***//

	Описание=Новый ОписаниеПередаваемогоФайла(врФайлПечатнойФормы,Адрес);
	МассивОписаний=Новый Массив;
	МассивОписаний.Добавить(Описание);
	ПолучитьФайлы(МассивОписаний,,,Ложь);
	//ПолучитьФайл(Адрес,врФайлПечатнойФормы,Ложь);
	//-

	мфайл = Новый Файл(врФайлПечатнойФормы);
	
	ПараметрыПечати=ПолучитьПараметрыПечатиНаСервере(ТекущееРабочееМесто);
	ИмяПринтера=?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),ПараметрыПечати.ИмяПринтераДокументов,ПараметрыПечати.ИмяПритераЭтикеток);
	// проверить существует ли принтер на компе с таким именем
	//МассивПринтеров=ПолучитьМассивПринтеров();
	//Если МассивПринтеров.Найти(ИмяПринтера)=Неопределено Тогда
	//
	//	А = Новый Массив();
	//	А.Добавить(Новый ФорматированнаяСтрока("Имя принтера """+ИмяПринтера+""" не найдено.",Новый Шрифт(,12,Истина)));
	//	А.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+" Печать не возможна.",Новый Шрифт(,14,Истина)));
	//	
	//	Стр = Новый ФорматированнаяСтрока(А);
	//	ПоказатьПредупреждение(,стр);
	//	возврат;
	//КонецЕсли; 
	ПоказатьОповещениеПользователя(НСтр("ru='Документ отправлен на печать';uk='Документ відправлен на друк'"),	, ,	БиблиотекаКартинок.Информация32);
	
	ИмяПринтера = "Microsoft Print to PDF";
	WshShell = новый COMОбъект("WScript.Shell");
	//ReturnCode=WshShell.Run("""C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe"" /t "+мфайл.ПолноеИмя+" "+ИмяПринтера, 1, True);
	ReturnCode=WshShell.Run("""C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe"" /t "+""""+врФайлПечатнойФормы+""""+" "+ИмяПринтера, 1, True);
	ИмяРеквизита=?(СтрНачинаетсяС(ИмяКоманды,"ТТН"),"СсылкаНаФайлТТННаСайте","СсылкаНаФайлЯрлыкиНаСайте");
	СохранимЗначениеРеквизита(ИмяРеквизита,СсылкаНаДокумент);
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивПринтеров() Экспорт
	
	WScriptNetwork = Новый COMОбъект("WScript.Network");
	МассивПринтеров = Новый Массив;
	Printers = WScriptNetwork.EnumPrinterConnections ();
	КоличествоПринтеров = Printers.length - 1;
		
	Для Номер = 0 По КоличествоПринтеров Цикл
		
		ТекСтруктура = Новый Структура("Порт, Имя");
		ТекСтруктура.Порт = Printers.Item(Номер);
		Номер = Номер + 1;
		ТекСтруктура.Имя = Printers.Item(Номер);
		МассивПринтеров.Добавить(Printers.Item(Номер));
		//МассивПринтеров.Добавить(ТекСтруктура);
		
	КонецЦикла;
	
	Возврат МассивПринтеров;
	
КонецФункции 

&НаСервере
Процедура ТекущееУстройствоПриИзмененииНаСервере()
	// Вставить содержимое обработчика. 
	если ЗначениеЗаполнено(ЭтотОбъект.ТекущееУстройство) Тогда
		Справочники.ПодключаемоеОборудование.ВыбраноУстройство(ЭтотОбъект.ТекущееУстройство );
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТекущееУстройствоПриИзменении(Элемент)
	ТекущееУстройствоПриИзмененииНаСервере();
	Элементы.Весы.Заголовок=ТекущееУстройство;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры
//нвг 09-11-2020 Конец

